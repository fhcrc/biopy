==============
Sampling trees
==============

----------------------
sample_coalescent_tree
----------------------

    Draw gene tree(s) using the coalescent. The effective population size
    function can be constant, stepwise constant or piecewise linear.

Usage:
^^^^^^

::

  Constant population size of 2, 4 tips.
  
| **$ sample_coalescent_tree -p 2 4**
| (((x0:0.430174327901023,x2:0.430174327901023):0.09226922001160981,x3:0.5224435479126328):0.9702406222119677,x1:1.4926841701246005)

::

  Stepwise constant population size -- 2 between 0 and 3, 1 after 3.

| **$ sample_coalescent_tree -p S2,3,1 4**
| (((x0:0.057576007960497465,x3:0.057576007960497465):3.776217182439077,x2:3.833793190399575):2.2138070259081126,x1:6.047600216307687)

::

  Linear piecewise population size -- from 2 to 1 over [0,3], 1 from 3 onwards.

| **$ sample_coalescent_tree -p L2,3,1 4**
| (((x0:0.3653501754201198,x2:0.3653501754201198):0.6559488470445316,x3:1.0212990224646514):2.462568493840673,x1:3.4838675163053243)

::

  10 trees, write to NEXUS file.

| **sample_coalescent_tree -p 1 -n 10 -o trees.nex 4**

.. _sameSpTrees:

-------------------
sample_species_tree
-------------------

    Draw a species tree and associated population sizes using a
    birth/death process and simple strategies for assigning population
    sizes.

    The ``-c DIST`` (``--continuous``) option assigns a linear population size
    over each branch while insuring continuity at divergence points (where a
    population splits into two parts). The population size at the tips is drawn
    using the distributions given by the ``-p`` option.  ``DIST`` is a
    distribution for the rate of change in population size. The population size
    at the beginning of the branch (i.e at divergence) is P\*2^{-r b}, where P is the
    population at the end of the branch (another divergence or a tip). r is the
    rate (draw from ``DIST``) and b is the branch length, as a fraction of total
    tree height. See the examples below and :ref:`randDists` on how to specify
    distribution on the command line.


Usage:
^^^^^^

::

  # Use all defaults, 4 species. Tree to standard output

| **$ sample_species_tree 4**
| ((s0[&dmv=1.0]:0.41089252692835293,s2[&dmv=1.0]:0.41089252692835293)[&dmv=1.0]:0.60164438594708414,(s1[&dmv=1.0]:0.6974904855834273,s3[&dmv=1.0]:0.6974904855834273)[&dmv=1.0]:0.31504642729200982)[&dmv=1.0]

::

  # Tips are a, b and c.

| **$ sample_species_tree a,b,c**
| ((a[&dmv=1.0]:0.057803879307793293,b[&dmv=1.0]:0.057803879307793293)[&dmv=1.0]:0.14586463694251167,c[&dmv=1.0]:0.20366851625030497)[&dmv=1.0]

::

  # Tips from the template tip_XX.

| **$ sample_species_tree tip_%%,3**
| ((tip_0[&dmv=1.0]:0.57034063257936918,tip_1[&dmv=1.0]:0.57034063257936918)[&dmv=1.0]:0.34713950826719109,tip_2[&dmv=1.0]:0.91748014084656027)[&dmv=1.0]

::

  # Sample 2 trees, write trees to file.

| **$ sample_species_tree -o trees.nex -n 2 4**

::

  # Use the Birth/Death process with a birth rate of 0.5 and death rate of 0.2

| **sample_species_tree -o trees.nex -b .5 -d .2 4**


::

  # Set all populations to (constant) size 2.

| **sample_species_tree -p 2 2**
| (s0[&dmv=2.0]:1.2891610183103901,s1[&dmv=2.0]:1.2891610183103901)[&dmv=2.0]

::

  # Set population sizes randomly at uniform between 1 and 2.

| **$ sample_species_tree -p u,1,2 2**
| (s0[&dmv=1.79769137391]:0.35789803986107804,s1[&dmv=1.15290941696]:0.35789803986107804)[&dmv=1.86217208257]

::

  # Set population sizes randomly using the continuous model. Starting
  # populations are uniform between 1 and 2, and rate of change has mean 0 and
  # 10% std. 

| **$ sample_species_tree -p u,1,2 -c n,0,.14 3**
| ((s0[&dmt=0.10408947419613503,dmv={1.064906605329454,1.1862825825205205}]:0.10408947419613503,s2[&dmt=0.10408947419613503,dmv={1.7181980594275048,1.6961359674946948}]:0.10408947419613503)[&dmt=0.15589597527830068,dmv={2.8824185500152151,2.9391480561689596}]:0.15589597527830068,s1[&dmt=0.25998544947443569,dmv={1.1801045742771281,1.225567022228395}]:0.25998544947443569)[&dmv=4.1647150783973546]



----------------------
genetree_in_sptree_sim
----------------------

  Generate gene trees compatible with species tree using the multispecies
  coalescent.

  Input species trees are read from a NEXUS file and should contain population
  size information in the same format generated by \*BEAST (See
  :ref:`MetapopSize`). Tips of invididuals belonging to *spname* are
  labeled *spname_tip0*, *spname_tip1*, etc. in the gene tree.

Usage:
^^^^^^

::

  Use defaults (one tree, two lineages per species)
  
| **$ genetree_in_sptree_sim "(a[&dmv=2]:1,b[&dmv=1]:1)[&dmv=1]"**
| (((b_tip0:0.23898602033743443,b_tip1:0.23898602033743443):1.708585246582623,a_tip0:1.9475712669200576):0.3178997374517798,a_tip1:2.2654710043718373)

::

  Five gene trees, output to nexus file.

| **$ genetree_in_sptree_sim.py -o trees.nex -n 5 "(a[&dmv=2]:1,b[&dmv=1]:1)[&dmv=1]"**

::

  Read species trees from file, two gene trees per species tree.

| **$ genetree_in_sptree_sim.py -o t2.nex -n 2  -t 3 trees.nex**



------------------
sample_ranked_tree
------------------

    Uniformly sample a *ranked* labelled tree from the space of all
    ranked labelled trees with a fixed *unranked* topology.

Example and discussion
^^^^^^^^^^^^^^^^^^^^^^

Sample 1200 trees with the given unranked topology.

| **$sample_ranked_tree -o ss.nex -n 12000 '((a,b),((c,d),e))'**

Use biopy code to count number of ranked histories and compare with sampled
trees.  Compute a p-value using bootstrapping for the hypothesis that sampling
is uniform.

::

 >>> import re, collections, random, biopy
 >>> c = Counter([l.split()[-2] for l in file('ss.nex').readlines() if l.startswith('tree ')])
 >>> p = eval(re.sub('([a-z])', "'\\1'", '((a,b),((c,d),e))'.replace('(','[').replace(')',']')))
 >>> print len(c), biopy.treeCombinatorics.labeledHistoriesOfTree(p)
 3 3
 >>> print c.values()
 [4015, 4007, 3978]
 >>> spread = lambda x :  max(x.values()) - min(x.values())
 >>> sc = spread(c)
 >>> sum([spread(Counter([random.randint(0, len(c)-1) for k in range(sum(c.values()))])) > sc for n in range(1000)])/1000.
 0.899
