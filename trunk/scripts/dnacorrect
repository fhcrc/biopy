#! /usr/bin/env python
## This file is part of biopy.
## Copyright (C) 2013 Joseph Heled
## Author: Joseph Heled <jheled@gmail.com>
## See the files gpl.txt and lgpl.txt for copying conditions.

from __future__ import division

import argparse, sys, os.path

parser = argparse.ArgumentParser(description = """Correct a DNA coding short"""
                                 """ sequence (read) with the help of an AminoAcid reference.""")

parser.add_argument("--output", choices = ["fancy", "plain", "sequence", "full-sequence"],
                    default = "plain", help="output options")

parser.add_argument("-t", "--translation", default = "Standard",
                    help="""Name of Genetic Code translation table.""")
parser.add_argument("-m", "--match-scores", dest="mscores", default = "blosum80",
                    help="""Name of AA match score table.""")

parser.add_argument('aaref', metavar = "PEPTIDE-REFERENCE", help = "")
parser.add_argument('seqs', metavar = 'FILE-OR-SEQUENCE',
                    help = "fasta file with DNA reads (or a single sequence)")

options = parser.parse_args()

import sys

from Bio.Data import CodonTable
try :
  if options.translation.isdigit() :
    transTable = CodonTable.unambiguous_dna_by_id[int(options.translation)]
  else :
    transTable = CodonTable.unambiguous_dna_by_name[options.translation]
except KeyError,e:
  print >> sys.stderr, "No such translation table:",options.translation
  sys.exit(1)

import Bio.SubsMat.MatrixInfo 
matchScores = getattr(Bio.SubsMat.MatrixInfo, options.mscores)
if matchScores is None :
  print >> sys.stderr, "No such match scores table:", options.mscores
  sys.exit(1)
  

from biopy import align, calign, aalign

aaref = [x.upper() for x in options.aaref]
if not all([x in aalign.AAorder for x in aaref]) :
  print >> sys.stderr, "Invalid AA reference: (",options.aaref,")"
  sys.exit(1)
  

geneticCode = [None]*(64)

ii = [(getattr(calign, c),c) for c in "AGCT"]
for k1,c1 in ii :
  for k2,c2 in ii :
    for k3,c3 in ii :
      x = transTable.forward_table.get(c1 + c2 + c3)
      if x is not None :
        geneticCode[16*k1 + 4*k2+ k3] = aalign.AAorder.index(x)
      else :
        geneticCode[16*k1 + 4*k2+ k3] = -1

for sc in transTable.stop_codons :
  k1,k2,k3 = [ii["AGCT".index(x)][0] for x in sc]
  assert geneticCode[16*k1 + 4*k2+ k3] == -1

assert all([x is not None for x in geneticCode])

msc = [None]*(len(aalign.AAorder)**2)
for k1,c1 in enumerate(aalign.AAorder) :
  for k2,c2 in enumerate(aalign.AAorder) :
    k = (c1,c2)
    if k not in matchScores:
      k = c2,c1
    s = matchScores[k]
    assert msc[len(aalign.AAorder) * k1 + k2] is None
    msc[len(aalign.AAorder) * k1 + k2] = s

if os.path.exists(options.seqs) :
  from biopy.bioutils import readFasta
  allSeqs = list(readFasta(file(options.seqs)))
  for nm,seq in allSeqs:
    res = aalign.acorrect(seq, options.aaref, msc, geneticCode)
    if options.output == "plain" :
      aa = ''.join([aalign.AAorder[x] for x in res[1]])
      print nm + '|' + aa
    s = align.iton(res[0])
    print s
else :
  if not all([x in "AGCTNagctn-" for x in options.seqs]) :
    print >> sys.stderr, "Expecting a sequence or a fasta file name"
    sys.exit(1)
    
  res = aalign.acorrect(options.seqs, options.aaref, msc, geneticCode)
  s = align.iton(res[0])
  aa = ''.join([aalign.AAorder[x] for x in res[1]])
  if options.output == "plain" :
    print s, aa
  elif options.output == "sequence" :
    print s
  elif options.output == "full-sequence" :
    stats = res[2]
    dnapre = ''.join([x.lower() for x in options.seqs[:stats["dnaFreeStart"]]])
    dnasuf = ''.join([x.lower() for x in options.seqs[-stats["dnaFreeEnd"]:]])
    print dnapre + s + dnasuf
  elif options.output == "fancy" :
    stats = res[2]
    print stats["matches"],"matches,",stats["mismatches"],"mimatches ",stats["gaps"],"gaps."
    ci,cd = stats["correctionInsertions"], stats["correctionDeletions"]

    print ci+cd,"corrections,",ci,"insersions,",cd,"deletions."
    dnapre = ''.join([x.lower() for x in options.seqs[:stats["dnaFreeStart"]]])
    dnasuf = ''.join([x.lower() for x in options.seqs[-stats["dnaFreeEnd"]:]])
    aapre = ''.join([x.lower() for x in options.aaref[:stats["aaFreeStart"]]])
    aasuf = ''.join([x.lower() for x in options.aaref[-stats["aaFreeEnd"]:]])
    lpre = max(len(dnapre),len(aapre))
    codons = [s[3*k:3*k+3] for k in range(len(s)//3)]
    tr = [transTable.forward_table[x] for x in codons]
    print ' '*lpre, ' '.join([' %c ' % x for x in tr])
    print ' '*(lpre-len(dnapre)) + dnapre, ' '.join(codons),dnasuf
    print ' '*(lpre-len(aapre)) + aapre,' '.join([' %c ' % x for x in aa]),aasuf

  
