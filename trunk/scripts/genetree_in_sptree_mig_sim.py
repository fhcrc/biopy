#! /usr/bin/env python
## This file is part of biopy.
## Copyright (C) 2010 Joseph Heled
## Author: Joseph Heled <jheled@gmail.com>
## See the files gpl.txt and lgpl.txt for copying conditions.
#
# $Id:$ 

from __future__ import division

import optparse, sys, os.path
parser = optparse.OptionParser(os.path.basename(sys.argv[0]) +
                               """ [OPTIONS] species-trees-file
""")

parser.add_option("-n", "--ntrees", dest="ngenetrees",
                  help="""Number of gene trees per species tree """
                  + """(default 1)""", default = "1") 

parser.add_option("-e", "--redraw", dest="redraw",
                  help="""Change model based parameters every"""
                  + """ (default 1) trees.""", default = "1") 

parser.add_option("-t", "--per-species", dest="ntips",
                  help="""Number of individuals per species."""
                  + """(default 2)""", default = "2") 

parser.add_option("-o", "--nexus", dest="nexfile",
                  help="Print trees in nexus format to file", default = None)

parser.add_option("", "--total", dest="total",
                  help="""Stop after processing this number of species"""
                  + """ trees.""",
                  default = None) 

options, args = parser.parse_args()

nGeneTrees = int(options.ngenetrees) ; assert nGeneTrees > 0
nTips = int(options.ntips)           ; assert nTips > 0

nTotal = int(options.total) if options.total is not None else -1           
reDraw = int(options.redraw)

tipNameTemplate = "%s_tip%d"

nexusTreesFileName = args[0]

from biopy import INexus, beastLogHelper
from biopy.geneTreeWithMigration import GeneTreeSimulator, setIMrates

if os.path.isfile(nexusTreesFileName) :
  i = INexus.INexus().read(fileFromName(nexusTreesFileName))
  trees = [tree for tree in i]
else :
  trees = [INexus.Tree(nexusTreesFileName)]
  
hasPops = beastLogHelper.setDemographics(trees)
## if not all(has) :
##   print >> sys.stderr, "Error: Missing demographic(s)"
##   sys.exit(1)

hasLabels = beastLogHelper.setLabels(trees)
## if not all(has) :
##   print >> sys.stderr, "Error: Missing labels(s)"
##   sys.exit(1)

for tree,hasPop,hasLab in zip(trees,hasPops,hasLabels):
  if not hasLab :
    for i in tree.get_terminals() :
      data = tree.node(i).data
      if not hasattr(data, "labels") :
        labels = [tipNameTemplate % (data.taxon, k) for k in range(nTips)]
  if not hasPop:
    assert False

  counter = 0
  for k in range(nGeneTrees) :
    if counter == 0 :
      setIMrates(tree) 
      s = GeneTreeSimulator(tree)
    print s.simulateGeneTree()
    
    counter = (counter + 1) % reDraw

  nTotal -= 1
  if nTotal == 0 :
    break
  
sys.exit(0)


from biopy import INexus, speciesTreesGeneTrees, beastLogHelper
from biopy.treeutils import toNewick
from biopy.genericutils import fileFromName

outName = options.nexfile
if outName is not None:
  if os.path.isfile(outName) and os.path.getsize(outName) > 0 :
    print >> sys.stderr, "not overwriting existing file", outName
    sys.exit(1)
  outFile = file(outName, "w")
  print >> outFile, "[Generated by biopy genetree_in_sptree_sim, version 0.1]"
  print >> outFile, "[%s]" % " ".join(sys.argv)
  print >> outFile, "#NEXUS"
  print >> outFile, "begin trees;"
  def outTree(k,t) :
    return "tree gtree_%d = %s ;" % (k,t)
else:
  outFile = sys.stdout
  def outTree(k,t) :
    return t

count = 0
for tree in INexus.INexus().read(fileFromName(nexusTreesFileName)) :
  has = beastLogHelper.setDemographics([tree])
  
  if not has[0] :
    print >> sys.stderr, "No population size information in species tree"
    sys.exit(1)

  for tid in tree.get_terminals():
    data = tree.node(tid).data
    data.geneTreeTips = [tipNameTemplate % (data.taxon,k) for k in range(nTips)]
    
  for k in range(nGeneTrees) :
    g = speciesTreesGeneTrees.simulateGeneTree(tree)[0]

    print >> outFile, outTree(count, toNewick(g))
    count += 1

  nTotal -= 1
  if nTotal == 0 :
    break
  
if outName is not None:
  print >> outFile, "end;"
  outFile.close()
